# -*- coding: utf-8 -*-

import traceback
import socket


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

class Sock:
	def __init__(self, addr, port):
		self.addr = addr
		self.port = port
		self.timeout = 5
		self.ss = None


	def full_check (self):
		cp = self.check_port()
		cs = self.check_send()
		cr = self.check_recv()

		if (cp == 0) and (cs == 0) and (cr == 0):
			return 0

		else:
			return -1



	def check_port (self):
		# Ritorna 0 se il test è andato a buon fine
		# Ritorna 1 se il test è fallito
		try:
			tests = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			tests.settimeout(5)												# Timeout risposta
			c = tests.connect_ex((self.addr, self.port))
			tests.close()
			if c == 0:
				return 0
			else:
				return -1

		except socket.timeout:
			return -1	#return -2

		except Exception, e:
			traceback.print_exc(e)
			return -3



	def check_send (self):
		# Ritorna 0 se il test è andato a buon fine
		# Ritorna 1 se il test è fallito
		try:
			tests = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			tests.settimeout(5)												# Timeout risposta
			tests.connect((self.addr, self.port))
			tests.send("\x41"*4)
			tests.close()

			return 0


		except socket.timeout:
			return -1	#return -2

		except Exception, e:
			traceback.print_exc(e)
			return -3



	def check_recv (self):
		# Ritorna 0 se il test è andato a buon fine
		# Ritorna 1 se il test è fallito
		try:
			tests = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			tests.settimeout(5)												# Timeout risposta
			tests.connect((self.addr, self.port))
			tests.recv(1024)
			tests.close()

			return 0


		except socket.timeout:
			return -1	#return -2

		except Exception, e:
			#traceback.print_exc(e)
			return -3



	def connect (self):
		# Ritorna 0 se la connession è andata a buon fine
		# Ritorna 1 se la connession è fallita
		try:
			if (self.check_port () == 0):
				self.close()
				self.ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				self.ss.settimeout(self.timeout)
				self.ss.connect((self.addr, self.port))
				return 0

			else:
				return -1

		except Exception, e:
			#traceback.print_exc(e)
			return -3



	def send (self, payload):
		# Ritorna 0 se l'invio andato a buon fine
		# Ritorna -3 se l'invio è fallito
		try:
			self.ss.send(payload)
			return 0

		except Exception, e:
			#traceback.print_exc(e)
			return -3



	def recv (self, length):
		# Ritorna 0 se la ricezione è andata a buon fine
		# Ritorna -3 se la ricezione è fallita
		try:
			self.ss.recv(length)
			return 0

		except Exception, e:
			#traceback.print_exc(e)
			return -3



	def close (self):
		# Ritorna 0 se la chiusura è andata a buon fine
		# Ritorna -3 se la chiusura è fallita
		try:
			self.ss.close()
			return 0

		except Exception, e:
			#traceback.print_exc(e)
			return -3



	def set_timeout (self, timeout):
		self.timeout = timeout
		self.ss.settimeout(timeout)



	def run_protocol_exploit (self, config, exploit_payload):
		# config:		dict di configurazione attacco, ESEMPIO: 
		'''
								config = {
									
									'addr': "192.168.1.118",						# indirizzo target
									'port': 9999,									# porta target

									'lbytes': 'TRUN .',								# PER EXPLOIT: stringa comando
									'rbytes': '\r\n',								# PER EXPLOIT: stringa chiusura comando (es. \n)
									
									'protocol': [
										{'action':'recv', 'length':1024},			# Riceve il banner
										{'action':'exploit'},						# COMANDO -> Exploit qui
									]
								}
		'''
		try:
			self.connect ()
			for e in config['protocol']:

				if (e['action'] == 'recv'):
					status = self.recv (e['length'])
					if (status != 0): return -1 	# { 'action':'recv', 'length':e['length'], 'status':status }

				elif (e['action'] == 'send'):
					status = self.send (e['payload'])
					if (status != 0): return -2 	# { 'action':'send', 'payload':e['payload'], 'status':status }

				elif (e['action'] == 'exploit'):
					status = self.send (str(config['lbytes']) + exploit_payload + str(config['rbytes']))
					if (status != 0): return -9 	# { 'action':'exploit', 'payload':exploit_payload, 'status':status }

			return 0

		except Exception, e:
			traceback.print_exc(e)
			return -3

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 







